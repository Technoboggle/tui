cat > "$DEST" << EOF
#!$(which $USER_SHELL)
source /etc/profile.d/tui.sh
#
#	File:		$DEST
#	Author: 	$USER_NAME
#	Contact:	$USER_EMAIL
#	License:	$DEFAULT_LICENSE
#	Created:	$(date +'%Y.%m.%d')
#	Changed:	$(date +'%Y.%m.%d')
	script_version=0.1
	TITLE="${DEST##*/}"
#	Description:	Text
#			...
#			...
#
#
#	Script Environment
#
	ME="\${0##*/}"			# Basename of \$0
	ME="\${ME/.sh/}"			# Cut off .sh extension
	ME_DIR="\${0/\${0##/*/}}"		# Dirname of \$0
	CONFIG="\$HOME/.config/\$ME.conf"	# Configuration file
	LOG="\$HOME/\$ME.log"		#-\$(date +'%T')	# If a daily log is prefered
#
#	Help text
#
	help_text="
\$ME (\$script_version)
\${TITLE^}
Usage: 		\$ME [options] [arguments]
Examples:	\$ME -a
		\$ME -e optVAL
		\$ME ARG
Where options are:
	-h(elp) 		This screen
	-L(OG)			Show the log file (\$LOG)
	-e(xample)	ARG	Example with mandatory argument
	-a(nother)	[ARG]	Example with optinal argument

"
#
#	Variables
#
	todo=by_you
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: date time pid username --
	# followed by the supplied "message string"
		printf "\$(date +'%F %T') \$\$ \$USER -- \$1\\n" >> \$LOG
	}
	MenuSetup() { # 
	# Configures the variables/files used by the script
	# The 'MNU_SETUP_A' variables, are used as menu and for the case statement, same for the functions
		#
		#	Variables
		#
			MNU_SETUP_A="Demo setup"
			MNU_SETUP_B="Demo entry"
			MNU_SETUP_C="Demo value"
		#
		#	Functions
		#
			mnu_funcA() { # args?
			# Description
			# Returns what - format?
				NAME=func_value_name
				CURRENT=\$(tui-value-get "\$CONFIG" "\$NAME")
				tui-echo "\${NAME^} is currently set to:" "\$CURRENT"
				if tui-yesno "Change this?"
				then 	select newval in \$TODO_LIST;do break;done
					tui-value-set "\$CONFIG" "\$NAME" "\$newval"
					doLog "\$CONFIG" "Changed '$NAME' from '\$CURRENT' to '\$newvalue'"
				fi
			}
			mnu_funcB() { # args?
			# Description
			# Returns what - format?
				NAME=func_value_name
				CURRENT=\$(tui-value-get "\$CONFIG" "\$NAME")
				tui-echo "\${NAME^} is currently set to:" "\$CURRENT"
				if tui-yesno "Change this?"
				then 	newval=$(tui-read "What is \$NAME's new value:")
					tui-value-set "\$CONFIG" "\$NAME" "\$newval"
					doLog "\$CONFIG" "Changed '\$NAME' from '\$CURRENT' to '\$newvalue'"
				fi
			}
			mnu_funcC() { # args?
			# Description
			# Returns what - format?
				tui-echo "Do C : \$@"
			}
		#
		#	Menu / Action
		#
			setup_toggle=true
			while \$setup_toggle ; do
				clear 
				tui-header "\$ME (\$script_version)" "\$(date +'%F %T')"
				tui-title "Setup : \$ME"
				select action in Back "\$MNU_SETUP_A" "\$MNU_SETUP_B" "\$MNU_SETUP_C"
				do 	case "\$action" in
					Back)	setup_toggle=false
						break
					;;
					"\$MNU_SETUP_A")
						cmd=mnu_funcA
						args="argA argB"
					;;
					"\$MNU_SETUP_B")
						cmd=mnu_funcB
						args=""
					;;
					"\$MNU_SETUP_C")
						cmd=mnu_funcC
						args=""
					;;
					esac
					tui-title "Changing \$action"
					#doLog "Setup : \$action : \$cmd : \$args"
					\$cmd \$args
					RET=\$?
					doLog "Setup : \$action : \$cmd : \$args : ret \$RET"
					tui-status \$RET "Setup \$action" || tui-press
					break
				done
			done
	}
#
#	Environment checks
#
	[[ ! -e "\$LOG" ]] && \\
		touch \$LOG && \\
		doLog "------------------------------------------" && \\
		doLog "Created logfile of \$ME (\$script_version)" && \\
		doLog "------------------------------------------"
	# This is optimized for a one-time setup
	[[ ! -e "\$CONFIG" ]] && \\
		doLog "Setup : First config" && \\
		tui-echo "Entering first time setup." "\$SKIP" && \\
		sleep 1 && \\
		MenuSetup
	source "\$CONFIG" || ( doLog "Failed to load: \$CONFIG" ; tui-status 1 "Failed to load: \$CONFIG" )
#
#	Catching Arguments
#
	#[[ -z \$1 ]] && printf "\$help_text" && exit \$RET_FAIL
	# A ':' after a char indicates that this option requires an argument
	while getopts "ae:hL" opt
	do 	case \$opt in
		a)	# This is only demo
			ARG_TOGGLE_ANOTHER=set
			;;
		e)	# This is only demo
			optE_argument="\$OPTARG"
			optE_bool=true
			;;
		h)	printf "\$help_text"
			exit \$RET_HELP
			;;
		L)	less "\$LOG"	
			exit \$RET_DONE
			;;
		# *)	printf "\$help_text" ; exit \$RET_FAIL	;;
		esac
	done
	shift \$((\$OPTIND - 1))
	ARGS=(\${*})			# Remaining arguments
	ARGS_COUNT=\${#ARGS[@]}		# Amount of remaining

#
#	Display & Action
#
	tui-header "\$ME (\$script_version)" "\$(date +'%F %T')"
	tui-title "\$TITLE"
	tui-echo "Script resides in:" 	"\$ME_DIR"
	tui-echo "Logfile:" 		"\$LOG"
	tui-echo "Configuration:" 	"\$CONFIG"
	
EOF
