#!/bin/bash
source /etc/profile.d/tui.sh

cat > "$DEST" << EOF
#!/bin/bash
#
# Copyright (c) $(date +'%Y') $USER_NAME  <$USER_EMAIL>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	File:		${DEST##*/}
#	Author: 	$USER_NAME
#	Contact:	$USER_EMAIL
#	License:	$DEFAULT_LICENSE
#	Created:	$(date +'%Y.%m.%d')
#	Changed:	$(date +'%Y.%m.%d')
	script_version=0.0.1
	TITLE="${DEST##*/}"
#	Description:	Text
#			...
#			...
#
#
#	Script Environment
#
	ME="\${0##*/}"			# Basename of \$0
	ME="\${ME/.sh/}"			# Cut off .sh extension
	[[ ! "." = "\$(dirname \$0)" ]] && \\
		ME_DIR="\$(dirname \$0)" || \\
		ME_DIR="\$(pwd)"		# Dirname of \$0
	CFG_DIR="\$HOME/.config/\$ME"	# Configuration directory
	CONFIG="\$CFG_DIR/\$ME.conf"	# Configuration file
	CONFIG_FILE_ARRAY=("\$CONFIG")	# An array of all configuration scripts used by ${DEST##*/}
	LOG="\$CFG_DIR/\$ME.log"		# Logfile
	tempfile="\$CFG_DIR/\$ME.tmp"	# Tempfile
	REQUIRES="pack ages as string"
#
#	Help text
#
	help_text="
\$ME (\$script_version)
\${TITLE^}
Usage: 		\$ME [options] [arguments]
Examples:	\$ME -a
		\$ME -e optVAL
		\$ME ARG
Where options are:
	-h(elp) 		This screen
	-C(onf			Show the config/setup dialog
	-L(OG)			Show the log file (\$LOG)
	-e(xample)	ARG	Example with mandatory argument
	-a(nother)	[ARG]	Example with optinal argument

Files:
--------------------------------------
Script:		\$ME
Script-Dir:	\$ME_DIR
Config: 	\$CONFIG
Config_Dir:	\$CFG_DIR
Log:		\$LOG
Tempfile:	\$tempfile
"
#
#	Configuration file template
#
	config_template="#!/bin/bash
# Configuration file for \$ME (\$script_version) by $USER_NAME
#
#	Booleans
#
	issetCopy=false
	issetVerbose=false
#
#	Variables
#
	lang=eng
	varOne=\"\"
	varTwo=\"\"
#
#	Arrays
#
	MSG_DEMO[eng]=\"Greetings\"
	MSG_DEMO[ger]=\"GrÃ¼sse\"
"
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "\$LOG" "\$1"
	}
	checkReqs() { # LIST
	# Installs missing packages
	# Requires a config file
	#
	#	vars
	#
		req_str="req_inst"
		req_inst=\$(tui-value-get "\$CONFIG" "\$req_str" )
		req_total=\$(printf \${REQUIRES}|wc|awk '{print \$2}'
	
	
	#
	#	Display
	#
		[[ \$req_inst = true ]] && return 0
		tui-progress -ri \$ME-reqs -m \$req_total) " "
		doLog "Req : Checking for installed packages"
		
		# Create a list of packages to install
		for R in \$REQUIRES;do
			tui-progress \\
				-i \$ME-reqs \\
				-m \$(printf \${REQUIRES}|wc|awk '{print \$2}') \\
				"Check for required: \$R"
			rpm -qa \$F > /dev/zero && \\
				doLog "Req : Found \$R" || \\
				( REQUIRED+=" \$R" ; doLog "Req : Missing \$R" )
		done
		
		# Install the missing packages
		if [[ ! " " = "\$(printf "\${REQUIRED} ")" ]]
		then 	[[ ! 0 -eq \$UID ]] && \\
				tui-echo "YUM requires root access!" && \\
				return 1
			tui-title "Installing missing packages"
			doLog "Req : Installing missing packages: \$REQUIRED"
			yum install -y \$REQUIRED && \\
				printf "req_inst=true\n" >> "\$CONFIG"
			tui-status \$? "Installed: \$REQUIRED"
			[[ 0 -eq \$? ]] && \\
				ret_info="succeeded" || \\
				ret_info="failed"
			doLog "Req: Installation of \$REQUIRED \$ret_info"
		else 	[[ ! true = "\$req_inst" ]] && \\
				printf "req_inst=true\n" >> "\$CONFIG" && \\
				doLog "Req : All required packages are already installed"
		fi
	}
	MenuSetup() { # 
	# Configures the variables/files used by the script
	#
	#	Check for config file
	#
		[[ -f "\$CONFIG" ]] || \\
			( printf "\$config_template" > "\$CONFIG" ; doLog "Config: Default configurationfile created" )
	#
	#	Menu entries
	#
		opwd=\$(pwd)
		cd "\$CFG_DIR"
	#
	#	Menu / Action
	#
		setup_toggle=true
		while \$setup_toggle ; do
			# While there are more files, printf 'header'
			clear 
			tui-header "\$ME (\$script_version)" "\$TITLE" "\$(date +'%F %T')"
			tui-title "Setup : \$ME"
			
			# Select among files
			if [[ 1 -eq \${#CONFIG_FILE_ARRAY[@]} ]]
			then	# Its only 1 file, preview
				for VAR in \$(tui-value-get -l "\$CONFIG");do 
					val="\$(tui-value-get \$CONFIG \$VAR)"
					tui-echo "\$VAR" "\$val"
				done
				#grep -v ^"#" "\$CONFIG" > "\$tempfile"
				#oifs="\$IFS" ; IFS="="
				#while read var val;do
				#[[ \$# -gt 0 ]] && tui-echo "\$var" "\$val"
				#done<"\$tempfile"
				#IFS="\$oifs"
				tui-echo "Please select wich value to change:"
				select VAR in Back Edit \$(tui-value-get -l "\$CONFIG");do
				case \$VAR in
				Back) 	setup_toggle=false
					break
					;;
				Edit)	tui-edit "\$CONFIG"
					;;
				*)	VAL=$(tui-value-get "\$CONFIG" "\$VAR")
					tui-echo "Currently '\$VAR' is set to '\$VAL'."
					tui-yesno "Do you really want to change this?" || break
					newval=\$(tui-read "Please type new value:")
					msg="Changed \"$var\" from \"$val\" to \"$newval\""
					tui-value-set "\$CONFIG" "\$var" "\$newval"
					tui-status \$? "\$msg" && \\
						doLog "Setup: \$msg" || \\
						doLog "Setup: Failed to c\$(printf \${msg:1}|sed s,ged,ge,g)"
					;;
				esac
				done
				
			else	# There are more to choose from
				MNU_ENTRY=( \$(ls) )
				#MNU_ENTRY=( \$(tui-value-get -l "\$CONFIG") )
				tui-echo "Please select a file to open:"
				select FILE in Back "\${CONFIG_FILE_ARRAY[*]}"
				do 	VARS=\$(tui-value-get -l "\$FILE"|grep -v ^"#")
					case "\$FILE" in
					Back)	setup_toggle=false
						break
						;;
					*)	tui-title "Configuration File: \$FILE"
						tui-echo "Which variable to change?"
						select var in Back \$VARS
						do	val=\$(tui-value-get "\$CONFIG" "\$var")
							tui-echo "\${var^} is set to:" "\$val"
							case \$var in
							Back)	break	;;
							\*)	if tui-yesno "Change this value?"
								then 	newval=\$(tui-read "Please type new value:")
									msg="Changed \"$var\" from \"$val\" to \"$newval\""
									# Save the new value to variable in config 
									tui-value-set "\$CONFIG" "\$var" "\$newval"
									tui-status \$? "\$msg" && \\
										doLog "Setup: \$msg" || \\
										doLog "Setup: Failed to c\$(printf \${msg:1}|sed s,ged,ge,g)"
								fi
								;;
							esac
						
						done
						;;
					esac
				done
			fi
		done
		cd "\$pwd"
	}
#
#	Environment checks
#
	# This is optimized for a one-time setup
	if [[ ! -e "\$CONFIG" ]]
	then	[[ -d "\$CFG_DIR" ]] || \
			( mkdir -p "\$CFG_DIR" ; tui-echo "Entering first time setup." "\$SKIP" )
		[[ ! -e "\$LOG" ]] && \\
			touch \$LOG && \\
			doLog "------------------------------------------" && \\
			doLog "Created logfile of \$ME (\$script_version)" && \\
			doLog "------------------------------------------" && \\
			doLog "Setup : First config"
		sleep 0.5
		MenuSetup
	fi
	# Load default values before argument handling
	source "\$CONFIG" || \\
		( doLog "Failed to load: \$CONFIG" ; tui-status 1 "Failed to load: \$CONFIG" )
#
#	Catching Arguments
#
	#[[ -z \$1 ]] && printf "\$help_text" && exit \$RET_FAIL
	# A ':' after a char indicates that this option requires an argument
	while getopts "ae:hCL" opt
	do 	case \$opt in
		a)	# This is only demo
			ARG_TOGGLE_ANOTHER=set
			;;
		e)	# This is only demo
			optE_argument="\$OPTARG"
			optE_bool=true
			;;
		h)	printf "\$help_text"
			exit \$RET_HELP
			;;
		L)	less "\$LOG"	
			exit \$RET_DONE
			;;
		C)	MenuSetup
			exit \$RET_DONE
			;;
		# *)	printf "\$help_text" ; exit \$?	;;
		esac
	done
	shift \$((\$OPTIND - 1))
	ARGS=("\${*}")			# Remaining arguments
	ARGS_COUNT=\${#ARGS[@]}		# Amount of remaining
#
#	Install missing packages
#
	tui-progress -ri "\$\$ME"
	if [[ ! true = "\$req_inst" ]]
	then 	doLog "Req : Checking for installed packages"
		for R in \$REQUIRES;do
			tui-progress -i \$\$ -m \${#REQUIRES} "Check requirement: $R"
			rpm -qa \$F > /dev/zero || ( REQUIRED+=" \$R" ; doLog "Req : Missing \$R" )
		done
	fi
	if [[ ! "" = "\$(printf "\$REQUIRED")" ]]
	then 	tui-title "Installing missing packages"
		doLog "Installing missing packages: \$REQUIRED"
		sudo yum install -y \$REQUIRED && \\
			printf "req_inst=true\\n" >> "\$CONFIG"
	else 	[[ ! true = "\$req_inst" ]] && \\
			printf "req_inst=true\\n" >> "\$CONFIG" && \\
			doLog "All required packages already installed"
	fi
#
#	Display & Action
#
	tui-header "\$ME (\$script_version)" "\$(date +'%F %T')"
	tui-title "\$TITLE"
	tui-echo "This is some sample test" \\
		"with a centre" \\
		"and right alignment"
	tui-echo "Script resides in:" 	"\$ME_DIR"
	tui-echo "Logfile:" 		"\$LOG"
	tui-echo "Configuration:" 	"\$CONFIG"
	tui-echo "Temp file:"		"\$tempfile"
EOF
