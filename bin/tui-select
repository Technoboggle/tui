#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Descriptional text here...
#	and here...
#
#
#
#	Variables
#
	#source tui
	. /etc/tui/tui.conf
	[ 0 -ne $UID ] && . $HOME/.config/tui/user.conf
	[ -z "$TUI_THEME" ] && TUI_THEME=default
	. $PREFIX/share/tui/themes/"$TUI_THEME"
	#. /etc/tui/themes/$TUI_THEME

	#source /etc/tui/themes/$TUI_THEME
	ME=${0##*/}
	
	script_version=0.6.1
	counter=0
	AUTO=false
	COLUMNS=$(tput cols)
	help_text="
$ME ($script_version)
Usage: 		$ME [options] LIST 'of items' ..
Examples:	ret=\$($ME one two three)
		$ME *
Where options are:
		-a	Autoselect if only one entry was found
"
#
#	Action
#
	#[ -z "$1" ] && printf "$help_text" && exit 99
	while getopts ha opt
	do	case $opt in
		h|"")	printf "$help_text"
			exit 99
			;;
		a)	AUTO=true
			;;
		esac
	done
	shift $(($OPTIND - 1))
	
	# This many digits to read at max
	ARGS=("${@}")
	len=${#ARGS[@]}
	#echo $len
	$AUTO && \
		[ $len -eq 1 ] && \
		printf '%s\n' "$ARGS" > /dev/stdout && \
		exit 0
	
	# Show the options
	tui-list "${ARGS[@]}" > /dev/stderr
	
	# Repeat input while invalid
	invalid=true
	while $invalid
	do	# Get input
		tui-printf ">" > /dev/stderr
                printf "\r$BORDER_LEFT > " > /dev/stderr
                read -n ${#len} NUM
		
		if [ -z "$NUM" ]
		then	printf "\r" > /dev/stderr
		elif [ "" = "$(echo $NUM|tr -d [:digit:])" ] && [ $NUM -ne 0 ]
		then	# It is a number in range?
			[ $NUM -eq ${#ARGS[@]} ] && NUM=0
			#	invalid=false || \
			#	invalid=true
			
			[ $NUM -gt $[ $len - 1 ] ] && \
				invalid=true && \
				printf "\r$BORDER_LEFT >   \r" || \
				invalid=false
			
			# Array starts at 0
			NUM=$(( $NUM - 1 ))
		else 	printf "\r" > /dev/stderr
		fi
	done
	
	# Make 'nice to have' linebreak when read automaticly stops reading
	if [ 1 -eq $len ]
	then	printf "\n" > /dev/stderr
	elif [ ${#NUM} -eq $len ] 
	then	printf "\n" > /dev/stderr
	fi
	
	# This is the output
	printf '%s\n' "${ARGS[$NUM]}" > /dev/stdout