#!/bin/bash
#
# Copyright (c) 2014 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2013.05.03
#	Changed:	2014.12.11
	script_version=0.9.9
#	Description:	The absolute core function for TUI
#
#	Variables
#
	source /etc/tui/colors.conf
	if [[ -z "$TUI_THEME" ]]
	then	if [[ 0 -eq $UID ]]
		then	source /etc/tui/tui.conf
			TUI_THEME=$TUI_THEME_ROOT
		else	cfg="$HOME/.config/tui/user.conf"
			[[ ! -f "$cfg" ]] && \
				mkdir -p "$(dirname $cfg)" && \
				cp /usr/share/tui/*conf "$(dirname $cfg)"
			source "$cfg"
		fi
	fi
	source "/usr/share/tui/themes/$TUI_THEME"

	# Prepare for output:
	BORDER_RIGHT=""
	# from: http://rosettacode.org/wiki/Reverse_a_string#UNIX_Shell
	for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done
	HEAD_BG="$TUI_BACKGROUND"
	HEAD_FG="$TUI_FOREGROUND"
	TITLE_BG="$TUI_FONT_INVERT$TUI_BACKGROUND"
	TITLE_FG="$TUI_FONT_INVERT$TUI_FOREGROUND"
#
#	Regular data
#	
	ME="${0##*/}"
	ME_DIR="${0/${0##/*/}}"
	TITLE="$ME"
	help_text="
$ME ($script_version)
$TITLE
Usage: 	$ME [options] [arguments]
	$ME		Prints up to 3 arguments. 
			1: Left
			2: Left, Right
			3: Left, Center, Right
Arguments will tell $ME if and where to colorize, or if to do a linebreak.
Options are:
	-h(elp) 	This screen
	-E(cho)		Simulates 'echo', prints up to 3 strings and a newline.
	-T(itle)	Prints 1st argument centred, if more - aligment like tui-echo
			The inner background is colored white with blue font by default
	-H(header)	Full line has a blue background and white font as default color
	-S(tatus)	Does special handling with the last argument
"
	FIRST=""
	SECOND=""
	THIRD=""
	WIDTH=$( [ -z $COLUMNS ] && tput cols || printf $COLUMNS )	# Retrieve env or calc it new
	#WIDTH=$[ $WIDTH - ${#BORDER_LEFT} - ${#BORDER_RIGHT} - 2 ]	# Subtract default 'borders'
	((WIDTH -= (${#BORDER_LEFT} + ${#BORDER_RIGHT} + 2))) 
	WIDTH=$[ $WIDTH / 2 * 2 ]					# Make it even 
	EMPTY="$(printf '%*s' $WIDTH)"					# Get 'width' spaces
	doEcho=false
	doHeader=false
	doStatus=false
	doTitle=false
	optStyle=""
#
#	Catching Arguments
#
	while getopts "EHTSh?" name
	do 	case $name in
		E|echo) 	doEcho=true
				optStyle="-E"	;;
		H|header)	doHeader=true
				optStyle="-H"	;;
		T|title)	doTitle=true
				optStyle="-T"	;;
		S|status)	doStatus=true
				optStyle="-S"	;;
		h|"?"|*)	printf "$help_text"
				exit $RET_HELP
				;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS_COUNT=0
	
	# tui-status needs special treatment
	if $doStatus ; then
	#
	#	Fill array according to return value
	#
		# Status requires first to be numeric
		[[ ! "" = "$(echo $1|tr -d [:digit:])" ]] && tui-printf -S 1 "$ME: For option '-S' the first argument nees to be numeric!" && exit 1
		
		# get tÄ¥e vars
		source /etc/tui/status.conf
		unset retvalue[@]
		retvalue[0]="$TUI_DONE" ;	retvalue[1]="$TUI_FAIL"
		retvalue[2]="$TUI_WORK" ;	retvalue[3]="$TUI_TODO"
		retvalue[4]="$TUI_SKIP" ;	retvalue[5]="$TUI_NEXT"
		retvalue[6]="$TUI_BACK" ;	retvalue[7]="$TUI_CANC"
		retvalue[10]="$TUI_ON"	;	retvalue[11]="$TUI_OFF"
		retvalue[99]="$TUI_HELP";	retvalue[111]="$TUI_INFO"
		
		# Make arguments in order
		case $# in
		1)	FIRST="$2"
			SECOND=" "
			#THIRD=$1
			#ARGS_COUNT=2
			;;
		2)	FIRST="$2"
			SECOND=" "
			#THIRD=$1
			#ARGS_COUNT=3
			;;
		3)	FIRST="$2"
			SECOND="$3"
			;;
		esac
		ARGS_COUNT=3
		THIRD="${retvalue[$1]}"
		len_strings=$[ ${#FIRST} + ${#SECOND} + 8 ]
	else
		[ ! -z "$1" ] && FIRST="$1" && ((ARGS_COUNT++))
		[ ! -z "$2" ] && SECOND="$2" && ((ARGS_COUNT++))
		[ ! -z "$3" ] && THIRD="$3" && ((ARGS_COUNT++))
		len_strings=$[ ${#FIRST} + ${#SECOND} + ${#THIRD} ]
	fi
	
	[ ! -z "$4" ] && doMore=true || doMore=false
	[ -z $optStyle ] && optStyleTMP="-E" || optStyleTMP="$optStyle"
#
#	Verify all fit on 1 line
#
	if [[ $len_strings -gt $WIDTH ]]
	then 	# All vars are larger than the line supports
		# Splitting required
		case $ARGS_COUNT in
		1)	# Split up the only argument passed
			#echo "1-- $len_strings, $WIDTH, F$FIRST S$SECOND T$THIRD"
			half=$[ ${#FIRST} / 2 ]
			part1="${FIRST:0:$half}"
			part2="${FIRST:$half}"
			tui-printf $optStyleTMP "$part1"
			tui-printf $optStyle " " "$part2"
			;;
		2)	# Print each of the 2 arguments on a single line...
			#echo "2-- $len_strings, $WIDTH, F$FIRST S$SECOND T$THIRD"
			if [[ "" = "$(echo $FIRST|tr -d [:space:])" ]]
			then	# It is left aligned
			#	len=$(( 1 + ${#SECOND} ))
			#	if [[ $len -gt $WIDTH ]]
			#	then	
					half=$[ ${#SECOND} / 2 ]
					part1="${SECOND:0:$half}"
					part2="${SECOND:$half}"
					tui-printf $optStyleTMP " " "$part1"
					tui-printf $optStyle " " "$part2"
			#	else	tui-printf $optStyleTMP " " "$SECOND"
			#	fi
			elif [[ $WIDTH -lt ${#FIRST} ]]
			then	half=$[ ${#FIRST} / 2 ]
				part1="${FIRST:0:$half}"
				part2="${FIRST:$half}"
				tui-printf $optStyleTMP "$part1"
				tui-printf $optStyle " " "$part2"
			else	# OLD WORKING
				tui-printf $optStyleTMP "$FIRST"
				tui-printf $optStyle " " "$SECOND"
			fi
			
			
			
		#	half=$[ ${#FIRST} / 2 ]
		#		if [[ $[ $half + ${#SECOND} ] -lt $WIDTH ]]
		#		then	part1="${FIRST:0:$half}"
		#			part2="${FIRST:$half}"

		#			tui-printf $optStyleTMP "$part1"
		#			tui-printf $optStyle "$part2" "$SECOND"
		#		else	# OLD WORKING
		#			tui-printf $optStyleTMP "$FIRST"
		#			tui-printf $optStyle " " "$SECOND"
		#		fi
			;;
		3)	# Print only 2 on the first line
			echo "3-- $len_strings, $WIDTH, F$FIRST S$SECOND T$THIRD"
			if $doStatus
			then	tui-printf $optStyleTMP "$FIRST" 
				tui-printf $optStyle " " "$SECOND" "$THIRD"
			else	tui-printf $optStyleTMP "$FIRST" "$SECOND"
				tui-printf $optStyle "$THIRD"
			fi
			;;
		esac
		# Since this is special handling, 
		# calling itself with reduced string lengths
		# so we can exit after this is done
		exit
	# else # just continue with the script below
	fi
#
#	Prepare Colors & Strings
#
	if [ $doEcho = true ] || [ $doStatus = true ]
	then	COLOR_LINE_START="\r${TUI_COLOR_RESET}"
		COLOR_LINE_IDENT=""
		COLOR_LINE_CLOSE=""
		COLOR_LINE_END="${TUI_COLOR_RESET}\n${TUI_COLOR_RESET}"
	elif [ $doHeader = true ]
	then	# Full line
		COLOR_LINE_START="\r${HEAD_BG}${HEAD_FG}"
		COLOR_LINE_IDENT=""
		COLOR_LINE_CLOSE=""
		COLOR_LINE_END="${TUI_COLOR_RESET}\n${TUI_COLOR_RESET}"
	elif [ $doTitle = true ]
	then	# 'Inlay'
		COLOR_LINE_START="\r${TUI_COLOR_RESET}"
		COLOR_LINE_IDENT="${TITLE_FG}${TITLE_BG}"
		COLOR_LINE_CLOSE="${TUI_COLOR_RESET}"
		COLOR_LINE_END="${TUI_COLOR_RESET}\n${TUI_COLOR_RESET}"
	else	# The default
		COLOR_LINE_START="\r${TUI_COLOR_RESET}"
		COLOR_LINE_IDENT=""
		COLOR_LINE_CLOSE=""
		COLOR_LINE_END="${TUI_COLOR_RESET}"
	fi
	
	case $ARGS_COUNT in
	0)	FIRST="${EMPTY:2}"
		SECOND=" "
		THIRD=" "
		;;
	1)	if [ $doTitle = true ]
		then 	SECOND="$FIRST"
			num_o="${#SECOND}"
			num=$[ $num_o / 2 * 2  ]
			[ $num_o -gt $num ] && adder=" "||adder="  "
			EMPTY="${EMPTY:${num}+2}"	# The +2 is a temp bugfix
			half=$[ ${#EMPTY} / 2  ]
			FIRST="${EMPTY:$half}"
			THIRD="$FIRST$adder"
		else	# Usual arangement
			SECOND=$"${EMPTY:${#FIRST}}"
		fi
		;;
	2)	# Make the last (2nd) passed argument aligned to right
		THIRD="$SECOND"
		SECOND="${EMPTY:${#FIRST}+${#SECOND}}"
		;;
#	3)	
		
#		;;
	*)	# 3 (BETA - and more - handler)
		$doStatus && \
			EMPTY="${EMPTY:${#FIRST}+${#SECOND}+8}" || \
			EMPTY="${EMPTY:${#FIRST}+${#SECOND}+${#THIRD}}"
		half=$[ ${#EMPTY} / 2 ]
		adder=$((len_strings % 2))
		SECOND="${EMPTY:$half}$SECOND${EMPTY:$half+$adder}"
		;;
	esac
#
#	Display & Action
#
	printf "${COLOR_LINE_START}${BORDER_LEFT}${COLOR_LINE_IDENT} ${FIRST}${SECOND}${THIRD} ${COLOR_LINE_CLOSE}${BORDER_RIGHT}${COLOR_LINE_END}"