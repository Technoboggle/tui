#!/bin/bash
# File		typewriter
# Description:	Simply prints a string char by char, waiting a certin delay in between.
# ------------------------------------------------------
#
#	Variables
#
	. tui
	. /usr/share/tui/themes/$TUI_THEME
	BORDER_RIGHT=""
	# from: http://rosettacode.org/wiki/Reverse_a_string#UNIX_Shell
	for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done
	WIDTH=$[ $(tput cols) - ( 2 * ${#BORDER_LEFT} ) - 2 ]
	EMPTY="$(printf '%*s' $WIDTH)"
	
	ME="${0##*/}"
	script_version=0.5.1
	DELAY=0.05
	MODE=cat
	
	help_text="$ME ($script_version)
Usage:	$ME [options] \"STRING\" ...

Example:	$ME \"some string\"
		$ME -d 0.005 \"\$(cat [/path/to/]file)\"
"
#
#	Getting options
#
	while getopts hd:t opt
	do	case $opt in
		h)	echo "$help_text"
			exit 1
			;;
		t)	MODE=typewriter
			;;
		d)	DELAY="$OPTARG"
			;;
		esac
	done
	shift $(($OPTIND - 1))
	
	[ -z "$1" ] && \
		echo "$help_text" && \
		exit 1
	ARGS=("${@}")
#
#	Display & Action
#
	case $MODE in
	cat)	for arg in "${ARGS[@]}"
		do 	if [ -f "$arg" ]
			then 	while read content
				do	# Leading dash
					[ "-" = "${content:0:1}" ] && \
						leadingDASHdummy="--" || \
						leadingDASHdummy=""
					#	content=" ${content}"
					# Tailing backslash
					[ ! -z "$content" ] && \
						[ "\\" = "${content:0:(-1)}" ] && \
						content="${content}\\\\"
					
					tui-echo $leadingDASHdummy "${content}"
				done<"$arg"
			else	tui-status 1 "File not found: $arg"
			fi
			
			# Thanks Jim
			#if [ -f "$arg" ]
			#then 	
			#	$AWK '{ dash=substr($0,1,1); 
			#		  if(dash=="-") {$0=substr($0,2)}; print}'  "$arg" |
			#	while read line
			#	do	
			#	     tui-echo "$line"
			#	done 
			#else	tui-status 1 "File not found: $arg"
			#fi
			
		done
		;;
	typewriter)
		for arg in "${ARGS[@]}"
		do	# Pass every argument (each seperate STRING) by its own.
			[ -f "$arg" ] && \
				STRING="$(cat $arg)" || \
				STRING="$arg"
			
			echo "$STRING" | while read line
			do	COUNT=0		# Chars of line
				PRINTED=0	# Chars printed, to compare with available borders
				LEN="${#line}"
			
			
				printf "$BORDER_LEFT "
				while [ $COUNT -lt $LEN ]
				#while [ $PRINTED -lt $WIDHT ]
				do 	char="${line:$COUNT:1}"
					double="${line:$COUNT:2}"

					case "$double" in
					"\n"|"\t"|"\r"|"\\")
						char="${double/\\/\\\\}"
						COUNT=$(( $COUNT + 2 ))
						;;
					*)	case "$char" in
						"%")	char="%%"	;;
						'\')	char='\\'	;;
						'$')	char='\$'	;;
						#"{")	char="\{"	;;
						#"}")	char="\}"	;;
						esac
						COUNT=$(( $COUNT + 1 ))
						;; 
					esac
					

					printf "$char"
					PRINTED=$(( $PRINTED + 1 ))
					if [ $PRINTED -eq $WIDTH ] #|| [ "$double" = "\r" ]
					then	printf "${EMPTY:$PRINTED}$BORDER_RIGHT\n$BORDER_LEFT "
						PRINTED=0
					fi
					sleep $DELAY
				done
				
				# Close the line
				printf "${EMPTY:$PRINTED}$BORDER_RIGHT\n"
			done
		done
		;;
	esac
	exit 0