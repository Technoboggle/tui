#!/bin/bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014 by Simon Arjuna Erat (sea), erat.simon@gmail.com
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
#	File:		tui-list
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.11.06
#	Changed:	2014.12.08
	script_version=0.4
	TITLE="tui-list"
#	Description:	Text TODO
#			...  TODO
#
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-list
	ME="${ME/.sh/}"				# Cut off .sh extension
#
#	Variable defaults (options)
#
	MODE=num
#
#	Help text
#
	help_text="
$ME ($script_version)
${TITLE^}
Usage: 		$ME [options] [arguments]
Examples:	$ME 
		$ME -a one 'long string' three
Where options are:
	-h(elp) 		This screen
	-a(lpha)		Use letters instead of numbers
	-r(oman)		Use roman letters instead of numbers (up to 3000 valid)

"
#	-r(oman)		Use roman letters as numbers

	#[[ -z $1 ]] && printf "$help_text" && exit $RET_FAIL	## Uncomment to exit with help if nothing is passed
	# A ':' after a char indicates that this option requires an argument
	while getopts "ahr" opt
	do 	case $opt in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		a)	MODE=alpha 	;;
		r)	MODE=roman 	;;
			
		# *)	printf "$help_text" ; exit $?	;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=("${@}")			# Remaining arguments
	ARGS_COUNT=${#ARGS[@]}		# Amount of remaining
	COLUMNS=$(tput cols)
#
#	Functions
#
	num2char() { # NUM
	# Returns a letter string: a-z
	# Or: aa-az ba-bz, etc
		num=$1
		out=""
		list=( $(echo {a..z} {a..z}{a..z} {a..z}{a..z}{a..z} ))
		out="${list[$num]}"
		echo "$out"
	}
	num2roman() { # NUM
	# Returns roman letters
	#
		input=$1	# input num
		output=""	# Clear output string
		len=${#input}	# Initial length to count down
		
		roman_val() { # NUM one five ten
		# This sub does the basic 'roman' algorythm
		#
			N=$1
			one=$2
			five=$3
			ten=$4
			out=""
			
			case $N in
			0)	out+=""	;;
			[123])	while [[ $N -gt 0 ]]
				do	out+="$one"
					N=$(($N-1))
				done
				;;
			4)	out+="$one$five"	;;
			5)	out+="$five"	;;
			[678])	out+="$five"
				N=$(($N-5))
				while [[ $N -gt 0 ]]
				do	out+="$one"
					N=$(($N-1))
				done
				;;
			9)	while [[ $N -lt 10 ]]
				do	out+="$one"
					N=$(($N+1))
				done
				out+="$ten"
				;;
			esac
			echo $out
		}
		
		while [[ $len -gt 0  ]]
		do	# There are letters to add
			num=${input:0:1}
			# Do action according position
			case $len in
			3)	# 100
				output+="$(roman_val $num C D M)"
				;;
			2)	# 10
				output+="$(roman_val $num X L C)"
				;;
			1)	# 1
				output+="$(roman_val $num I V X)"
				;;
			*)	# 1000+
				# What works for less than 1000, doesnt work for any higher...
				# output+="$(roman_val $num M)"	# There are no higher numbers than 'M' for thousend
				num=${input:0:(-3)}
				while [[ $num -gt 0 ]]
				do	output+="M"
					num=$(($num-1))
				done
				
				;;
			esac
			input=${input:1} ; len=${#input}
		done
		echo $output
	}
#
#	Display & Action
#
#	C=0
#	while [[ ! "" = "${ARGS[$C]}" ]];do
	#	case $MODE in
	#	num)	count=$DONE	;;
	#	alpha)	count=$(num2char $DONE)	;;
	#	roman)	count=$(num2roman $DONE)	;;
	#	esac
#		tui-echo "$count) ${ARGS[$C]}"
#		C=$((C+1))
#	done
	unset OUT[@]
	OUT[0]=""
	shown=false
	MAX=3
	CUR=0
	DONE=0
	for OPT in "${ARGS[@]}"
	do	#echo $CUR$OPT
		DONE=$((DONE+1))
		# Do the visible counter
		case $MODE in
		num)	count=$DONE	;;
		alpha)	count=$(num2char $DONE)	;;
		roman)	count=$(num2roman $DONE)	;;
		esac
		
		# Add the string to array, or print array
		if [[ $CUR -lt $MAX ]]
		then	len=0
			for O in "${OUT[@]}";do len=$[ $len + ${#O} ];done
			sum=$[ $len + 2  + ( ${#BORDER_LEFT} * 2 ) ]
			if [[ $sum -lt $COLUMNS ]]
			then	OUT[$CUR]="$count) $OPT"
				shown=false
				CUR=$(( $CUR + 1 ))
			else	tui-echo "${OUT[@]}" >> /dev/stderr
				shown=true
			fi
		else 	tui-echo "${OUT[@]}" >> /dev/stderr
			shown=true
		fi
		#counter=$(( $counter + 1 ))
		$shown && CUR=0 && unset OUT[@]
	done
	# Print unprinted
	! $shown && tui-echo "${OUT[@]}" >> /dev/stderr
	#echo ${OUT[@]} bb ${ARGS[@]}